class node:
	def __init__(self,val):
		self.data = val
		self.next = None
	
	def getdata(self):
		return self.data
	
	def setdata(self, val):
		self.data = val
	
	def getnext(self):
		return self.next
	
	def setnext(self, pt):
		self.next= pt

def insertfront(first, num):
	temp = node(num)
	temp.setnext(first)
	first = temp
	return first
	
def deletefront(first):
	temp = first.getnext()
	first = temp
	return first
	
def insertback(first, val):
	newnode = node(val)
	if first == None:
		first = newnode
		return first
	temp = first
	while temp.getnext() != None:
		temp= temp.getnext()
	temp.setnext(newnode)
	return first

def deleteback(first):
	
	if first == None:
		print ("List is empty")
		return
	temp = first
	while temp.getnext().getnext() != None:
		temp= temp.getnext()
	temp.setnext(None)
	
def insertat(first, data, pos):
	count = 1
	if pos ==1 :
		first = insertfront(first, data)
		return first
	newnode = node(data)
	if first == None:
		first = newnode
		return first
	temp = first
	prev = None
	while count < pos:
		count +=1
		prev = temp
		temp = temp.getnext()
	newnode.setnext(temp)
	prev.setnext(newnode)
	return first

def deleteat(first, pos):
	count = 1 
	if first == None:
		print ("List is empty")
		return first
	if pos == 1:
		first = deletefront(first)
		return first
	temp = first
	while count < pos-1:
		temp = temp.getnext()
		count +=1
	temp.setnext(temp.getnext().getnext())
	return first

def deleteval(first, val):
	if first == None:
		print("list empty")
		return first
	temp= first
	num = first.getdata()
	if num == val :
		first=deletefront(first)
		return first
	while temp.getnext() != None:
		if temp.getnext().getdata() == val:
			temp.setnext(temp.getnext().getnext())
			return first
		temp= temp.getnext()
	print("value not found")
	return first

def remduplicate(first):
	d={}
	if first == None:
		print ("list empty")
		return first
	temp = first
	while temp!=None:
		a = temp.getdata()
		if a not in d.keys():
			d[a] = 1
		else:
			first = deleteval(first,a)
		temp = temp.getnext()
	return first
	
def printlinkedlist(first):
	temp = first
	while temp != None:
		print (temp.getdata())
		temp = temp.getnext()
def sizelinkedlist(first):
	temp = first
	count = 0
	while temp != None:
		count +=1
		temp=temp.getnext()
	print ("size of the list is", count)
	return
	
first = node(1) 
first = insertfront(first,5)
first= insertfront(first, 10)
first= insertfront(first, 15)
sizelinkedlist(first)
first= insertfront(first, 120)
first = deletefront(first)
first = insertback(first,27)
deleteback(first)
first = insertback(first, 54)
printlinkedlist(first)
sizelinkedlist(first)
first = insertat(first, 35, 3)
first = insertat(first, 35, 5)
first = insertat(first, 35, 6)
first = insertat(first, 99, 8)
printlinkedlist(first)
print ("--------------------------")
#first = deleteat(first,5)
first = deleteat(first,7)
first = deleteat(first,1)
printlinkedlist(first)
print ("--------------------------")
first = deleteval(first,10)
first = deleteval(first,17)
printlinkedlist(first)
print ("--------------------------")
first = remduplicate(first)
printlinkedlist(first)


